import{_ as A}from"./chunks/ArticleMetadata.Dug3bdYN.js";import{_ as y,m as o,a as c,u as k,B as p,e as n,x as t,ai as g,aZ as D,o as h,p as r,q as d}from"./chunks/framework.DGhdORX1.js";import"./chunks/theme.7Kxlk3Kc.js";const x=JSON.parse('{"title":"Vue通过PKCE对接认证服务","description":"","frontmatter":{"title":"Vue通过PKCE对接认证服务","author":"vains","date":"2024-05-05 13:00","isTop":"fasle","categories":["认证服务集成"],"tags":["Vue","Spring Boot","Spring Security","Spring OAuth2 Authorization Server"],"showComment":false},"headers":[],"relativePath":"authorization-server/04-进阶教程/05-vue-integration-server-provider-with-pkce.md","filePath":"authorization-server/04-进阶教程/05-vue-integration-server-provider-with-pkce.md","lastUpdated":1714905506000}'),C={name:"authorization-server/04-进阶教程/05-vue-integration-server-provider-with-pkce.md"},F=n("h1",{id:"vue单页面项目使用授权码模式对接流程说明",tabindex:"-1"},[t("Vue单页面项目使用授权码模式对接流程说明 "),n("a",{class:"header-anchor",href:"#vue单页面项目使用授权码模式对接流程说明","aria-label":'Permalink to "Vue单页面项目使用授权码模式对接流程说明"'},"​")],-1),B=g('<p><strong>以下流程摘抄自官网</strong></p><p>在本例中为授权代码流程。 授权码流程的步骤如下：</p><ol><li><p>客户端通过重定向到授权端点来发起 OAuth2 请求。 对于公共客户端，此步骤包括生成<code>code_verifier</code> 并计算<code>code_challenge</code>，然后将其作为查询参数发送。</p></li><li><p>如果用户未通过身份验证，授权服务器将重定向到登录页面。 身份验证后，用户将再次重定向回授权端点。</p></li><li><p>如果用户未同意所请求的范围并且需要同意，则会显示同意页面。</p></li><li><p>一旦用户同意，授权服务器会生成一个<code>authorization_code</code>并通过<code>redirect_uri</code>重定向回客户端。</p></li><li><p>客户端通过查询参数获取<code>authorization_code</code>并向<a href="https://docs.spring.io/spring-authorization-server/docs/current/reference/html/protocol-endpoints.html#oauth2-token-endpoint" target="_blank" rel="noreferrer">Token Endpoint</a>发起请求。 对于公共客户端，此步骤包括发送<code>code_verifier</code>参数而不是用于身份验证的凭据。</p></li></ol><h1 id="vue项目中修改内容" tabindex="-1">Vue项目中修改内容 <a class="header-anchor" href="#vue项目中修改内容" aria-label="Permalink to &quot;Vue项目中修改内容&quot;">​</a></h1>',4),E=g(`<h2 id="安装crypto-js依赖" tabindex="-1">安装crypto-js依赖 <a class="header-anchor" href="#安装crypto-js依赖" aria-label="Permalink to &quot;安装crypto-js依赖&quot;">​</a></h2><p>已安装可以忽略，该依赖是为了计算<code>Code Challenge</code>使用</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> crypto-js</span></span></code></pre></div><h2 id="typescript下额外添加-types-crypto-js依赖" tabindex="-1">TypeScript下额外添加<code>@types/crypto-js</code>依赖 <a class="header-anchor" href="#typescript下额外添加-types-crypto-js依赖" aria-label="Permalink to &quot;TypeScript下额外添加\`@types/crypto-js\`依赖&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> @types/crypto-js</span></span></code></pre></div><h2 id="编写公共方法" tabindex="-1">编写公共方法 <a class="header-anchor" href="#编写公共方法" aria-label="Permalink to &quot;编写公共方法&quot;">​</a></h2><h3 id="编写code-verifier生成与code-challenge的计算方法" tabindex="-1">编写<code>Code Verifier</code>生成与<code>Code Challenge</code>的计算方法 <a class="header-anchor" href="#编写code-verifier生成与code-challenge的计算方法" aria-label="Permalink to &quot;编写\`Code Verifier\`生成与\`Code Challenge\`的计算方法&quot;">​</a></h3><p>创建PKCE工具js文件</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CryptoJS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;crypto-js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 生成 CodeVerifier</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * return CodeVerifier</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> generateCodeVerifier</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> generateRandomString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 生成随机字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> length</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 随机字符串的长度</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@returns</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 随机字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> generateRandomString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> possible</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> possible.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> possible.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 生成 Code Challenge</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> code_verifier</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 上边生成的 CodeVerifier</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@returns</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> Code Challenge</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> generateCodeChallenge</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">code_verifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> base64URL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(CryptoJS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SHA256</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(code_verifier))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 将字符串base64加密后在转为url string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@returns</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> bese64转码后转为url string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> base64URL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> CryptoJS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">lib</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">WordArray</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(CryptoJS.enc.Base64)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/=/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;-&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;_&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 将字符串加密为Base64格式的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 将要转为base64的字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@returns</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 返回base64格式的字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> base64Str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CryptoJS.enc.Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(CryptoJS.enc.Utf8.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(str));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="编写获取地址栏参数方法" tabindex="-1">编写获取地址栏参数方法 <a class="header-anchor" href="#编写获取地址栏参数方法" aria-label="Permalink to &quot;编写获取地址栏参数方法&quot;">​</a></h3><p>略，已在上篇文章中贴出</p><h3 id="编写请求token方法" tabindex="-1">编写请求Token方法 <a class="header-anchor" href="#编写请求token方法" aria-label="Permalink to &quot;编写请求Token方法&quot;">​</a></h3><p>略，已在上篇文章中贴出</p><h3 id="在环境变量配置文件中添加配置" tabindex="-1">在环境变量配置文件中添加配置 <a class="header-anchor" href="#在环境变量配置文件中添加配置" aria-label="Permalink to &quot;在环境变量配置文件中添加配置&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">认证服务地址</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(token签发地址)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">VITE_OAUTH_ISSUER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//127.0.0.1:8080</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># PKCE流程使用的客户端Id</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">VITE_PKCE_CLIENT_ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pkce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 授权码模式使用的回调地址</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">VITE_PKCE_REDIRECT_URI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//127.0.0.1:5173/PkceRedirect</span></span></code></pre></div><h2 id="创建处理回调的页面pkceredirect-vue" tabindex="-1">创建处理回调的页面<code>PkceRedirect.vue</code> <a class="header-anchor" href="#创建处理回调的页面pkceredirect-vue" aria-label="Permalink to &quot;创建处理回调的页面\`PkceRedirect.vue\`&quot;">​</a></h2><p>页面加载时会尝试从地址栏获取参数<code>code</code>，如果能获取到说明是从认证服务回调过来的，执行换取token流程，如果没有获取到code说明需要发起授权申请。跟之前的授权码流程是一致的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">import router from &#39;../../router&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">import </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> getToken </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> from &#39;@/api/Login&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">import </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> getQueryString </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> from &#39;@/util/GlobalUtils&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">import </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> createDiscreteApi </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> from &#39;naive-ui&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">import </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> generateCodeVerifier, generateCodeChallenge </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> from &#39;@/util/pkce&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">const </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> message </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> = createDiscreteApi([&#39;message&#39;])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">// 生成CodeVerifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">let codeVerifier: string = generateCodeVerifier()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">// codeChallenge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">let codeChallenge: string = generateCodeChallenge(codeVerifier)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">// 生成state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">let state: string = generateCodeVerifier()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">// 获取地址栏授权码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">const code = getQueryString(&#39;code&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">if (code) </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 从缓存中获取 codeVerifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  const state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;state&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 校验state，防止cors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  const urlState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getQueryString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;state&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (urlState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> state) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    message.warning(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;state校验失败.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  } else {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 从缓存中获取 codeVerifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    const code_verifier = localStorage.getItem(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;codeVerifier&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    getToken({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      grant_type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;authorization_code&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      client_id: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">VITE_PKCE_CLIENT_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      redirect_uri: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">VITE_PKCE_REDIRECT_URI</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      code,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      code_verifier,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;accessToken&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(res))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({ path: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">warning</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`请求token失败：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">e</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">statusText</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} else </span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 缓存state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;state&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, state)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 缓存codeVerifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;codeVerifier&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, codeVerifier)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  window.location.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`\${</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">meta</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">env</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">VITE_OAUTH_ISSUER</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  }/oauth2/authorize?response_type=code&amp;client_id=\${</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">meta</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">env</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">VITE_PKCE_CLIENT_ID</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  }&amp;redirect_uri=\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">encodeURIComponent</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">meta</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">env</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">VITE_PKCE_REDIRECT_URI</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  )</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}&amp;scope=message.write%20message.read&amp;code_challenge=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">codeChallenge</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}&amp;code_challenge_method=S256&amp;state=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">state</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;加载中...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><h2 id="添加路由" tabindex="-1">添加路由 <a class="header-anchor" href="#添加路由" aria-label="Permalink to &quot;添加路由&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;/PkceRedirect&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;PkceRedirect&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;../views/login/PkceRedirect.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h1 id="认证服务修改内容" tabindex="-1">认证服务修改内容 <a class="header-anchor" href="#认证服务修改内容" aria-label="Permalink to &quot;认证服务修改内容&quot;">​</a></h1>`,21),u=g('<h2 id="在数据库中添加对应客户端的回调地址" tabindex="-1">在数据库中添加对应客户端的回调地址 <a class="header-anchor" href="#在数据库中添加对应客户端的回调地址" aria-label="Permalink to &quot;在数据库中添加对应客户端的回调地址&quot;">​</a></h2><p><strong>重要：例如文中的就需要给客户端<code>pkce-message-client</code>添加一个回调地址<code>http://127.0.0.1:5173/PkceRedirect</code></strong><br><strong>重要：例如文中的就需要给客户端<code>pkce-message-client</code>添加一个回调地址<code>http://127.0.0.1:5173/PkceRedirect</code></strong><br><strong>重要：例如文中的就需要给客户端<code>pkce-message-client</code>添加一个回调地址<code>http://127.0.0.1:5173/PkceRedirect</code></strong></p><p><strong>经过以上配置授权码模式的对接就完成了，接下来就可以测试了，在首页或者需要触发登录的地方添加一个按钮，点击跳转到<code>/PkceRedirect</code>之后会自动引导发起授权申请流程。</strong></p><h1 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h1>',4),m=n("p",null,[t("一直都有提到PKCE流程是授权码流程的扩展，通过这两篇文章也可以看出两种流程的授权申请流程基本是一样的，只不过PKCE将客户端密钥换成了"),n("code",null,"code_verifier"),t(" 和"),n("code",null,"code_challenge"),t("，虽然稍微麻烦了些，但是安全性也提高了很多；至于移动app或者pc端应用对接的流程也是一样的，只不过是将回调地址换成了URLSchema，其它都是一样的；测试的流程与授权码模式基本一致，这里就不带大家测试了，读者可自行测试，然后观察请求跳转情况。")],-1),_=n("p",null,"这里贴一张获取token成功的图片",-1),f=n("p",null,[n("img",{src:D,alt:"获取token成功"})],-1),v=n("p",null,[n("strong",null,"如果有什么问题可以在评论区指正，谢谢")],-1),b=n("h1",{id:"附录",tabindex:"-1"},[t("附录 "),n("a",{class:"header-anchor",href:"#附录","aria-label":'Permalink to "附录"'},"​")],-1),P=n("p",null,[t("文档地址："),n("a",{href:"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/guides/how-to-pkce.html",target:"_blank",rel:"noreferrer"},"How-to: Authenticate using a Single Page Application with PKCE")],-1);function S(s,T,V,I,R,q){const l=A,e=o("ClientOnly");return h(),c("div",null,[F,k(e,null,{default:p(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(h(),r(l,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),B,k(e,null,{default:p(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(h(),r(l,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),E,k(e,null,{default:p(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(h(),r(l,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),u,k(e,null,{default:p(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(h(),r(l,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),m,_,f,v,b,k(e,null,{default:p(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(h(),r(l,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),P])}const U=y(C,[["render",S]]);export{x as __pageData,U as default};
