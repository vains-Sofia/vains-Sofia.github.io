import{_ as g}from"./chunks/ArticleMetadata.DArXzXOG.js";import{_ as D,m as y,a as C,u as p,B as e,e as s,x as h,ai as d,o as t,p as r,q as A}from"./chunks/framework.DGhdORX1.js";import"./chunks/theme.C7H76Bwr.js";const N=JSON.parse('{"title":"基于redis的核心服务实现","description":"","frontmatter":{"title":"基于redis的核心服务实现","author":"vains","date":"2024-05-05 13:00","isTop":"fasle","categories":["认证服务集成"],"tags":["Spring Boot","Spring Security","Spring Data Redis","Spring OAuth2 Authorization Server"],"showComment":false},"headers":[],"relativePath":"authorization-server/04-进阶教程/09-implement-core-services-with-redis.md","filePath":"authorization-server/04-进阶教程/09-implement-core-services-with-redis.md","lastUpdated":null}'),B={name:"authorization-server/04-进阶教程/09-implement-core-services-with-redis.md"},o=s("h1",{id:"怎么使用spring-data-redis实现spring-authorization-server的核心services",tabindex:"-1"},[h("怎么使用Spring Data Redis实现Spring Authorization Server的核心services？ "),s("a",{class:"header-anchor",href:"#怎么使用spring-data-redis实现spring-authorization-server的核心services","aria-label":'Permalink to "怎么使用Spring Data Redis实现Spring Authorization Server的核心services？"'},"​")],-1),c=s("p",null,[h("本文对应的是文档中的"),s("a",{href:"https://docs.spring.io/spring-authorization-server/reference/guides/how-to-jpa.html",target:"_blank",rel:"noreferrer"},"How-to: Implement core services with JPA"),h("，文档中使用Jpa实现了核心的三个服务类：授权信息、客户端信息和授权确认的服务；本文会使用Spring Data Redis参考文档来添加新的实现。在这里也放一下文档中的一句话： "),s("em",null,[s("strong",null,"本指南的目的是为您自己实现这些服务提供一个起点，以便您可以根据自己的需要进行修改。")])],-1),F=s("h1",{id:"实现步骤",tabindex:"-1"},[h("实现步骤 "),s("a",{class:"header-anchor",href:"#实现步骤","aria-label":'Permalink to "实现步骤"'},"​")],-1),E=s("p",null,"因为本文使用的是Spring Data，所以需要先定义对应的实体，然后根据实体定义对应的Repository(Spring Data Repository)，最后实现核心的service，使用这些Repository操作Redis。",-1),u=s("ol",null,[s("li",null,"定义实体"),s("li",null,[h("定义"),s("a",{href:"https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis.repositories",target:"_blank",rel:"noreferrer"},"Redis Repositories")]),s("li",null,"实现核心服务类")],-1),m=s("h1",{id:"具体实现",tabindex:"-1"},[h("具体实现 "),s("a",{class:"header-anchor",href:"#具体实现","aria-label":'Permalink to "具体实现"'},"​")],-1),T=d("",36),v=s("p",null,[h("    到此为止基本就结束了，本文章和前边的所有系列文章没有必要的关联，如果是第一次看到文章的读者也是可以很顺畅的将文章中的内容引入项目，当然，因为引用了Spring Data Redis，所以项目必须要先有Redis支持。"),s("br"),s("br"),h(" 文章看起来很长，但是实际上就是定义三个实体类，定义三个Repository，然后实现核心的service；逻辑并不复杂，操作Redis的内容因为使用了Spring Data Repositories，所以这两部分内容很少，内容多得地方就在每个service中实体与默认实体的转换中，一大堆的转换内容导致文章看起来内容很多，但是这些内容在文档中都已经实现，所以说这部分内容直接Copy就行，哈哈。")],-1),R=s("h1",{id:"附录",tabindex:"-1"},[h("附录 "),s("a",{class:"header-anchor",href:"#附录","aria-label":'Permalink to "附录"'},"​")],-1),S=d("",1);function f(i,z,I,b,O,w){const k=g,l=y("ClientOnly");return t(),C("div",null,[o,p(l,null,{default:e(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(t(),r(k,{key:0,article:i.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),c,F,p(l,null,{default:e(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(t(),r(k,{key:0,article:i.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),E,u,m,p(l,null,{default:e(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(t(),r(k,{key:0,article:i.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),T,p(l,null,{default:e(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(t(),r(k,{key:0,article:i.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),v,R,p(l,null,{default:e(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(t(),r(k,{key:0,article:i.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),S])}const _=D(B,[["render",f]]);export{N as __pageData,_ as default};
